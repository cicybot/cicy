name: CiCi CD
on:
    push:
        tags:
            - v*
env:
    node-version: 20.11.1

permissions:
    contents: write


env:
  VERSION: 1.0.1
jobs:
    desktop-build:
        name: desktop-build
        needs: build_apk
        strategy:
            matrix:
                include:
                    - os: windows-latest
                      command: make:x64
                      tag: x64
                      dist: /apps/desktop/out/make/squirrel.windows/x64/*Setup.exe
        runs-on: ${{ matrix.os }}
        timeout-minutes: 30
            PROJECT_NAME: CiCy
            GITHUB_REPOSITORY: ${{ github.repository }}
            MAKE_OUT_DIR: ${{ github.workspace }}/apps/desktop/out/make
            GH_TOKEN: ${{ github.token }}
        steps:
            - name: Checkout to git repository
              uses: actions/checkout@v4

            - name: Set up Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.node-version }}
            - name: Enable Corepack
              run: |
                  corepack enable
            - name: Run install
              uses: borales/actions-yarn@v5
              with:
                  cmd: install
            - name: Build Pkg
              run: |
                  cd ${{ github.workspace }}
                  yarn build:pkg
                  echo "export {App} from '@cc/app';" > apps/desktop/src/app/App.tsx
            - name: Run build distributive
              uses: borales/actions-yarn@v5
              with:
                  cmd: ${{ matrix.command }}
                  dir: 'apps/desktop'
            - name: Release Upload assets on Win32
              if: runner.os == 'Windows'
              env:
                  tag: ${{ github.ref_name }}
              run: |
                  #gh release upload ${{ github.ref_name }} "${{env.MAKE_OUT_DIR}}/zip/win32/x64/${{env.PROJECT_NAME}}-win32-x64-${{env.VERSION}}.zip"
                  mv "${{env.MAKE_OUT_DIR}}/squirrel.windows/x64/${{env.PROJECT_NAME}}-${{env.VERSION}} Setup.exe" "${{env.MAKE_OUT_DIR}}/squirrel.windows/x64/${{env.PROJECT_NAME}}-win32-x64-${{env.VERSION}} Setup.exe"
                  gh release upload ${{ github.ref_name }} "${{env.MAKE_OUT_DIR}}/squirrel.windows/x64/${{env.PROJECT_NAME}}-win32-x64-${{env.VERSION}} Setup.exe"
    
  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    needs: build_cc_server_and_connctor
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

     - name: Set up Node
        uses: actions/setup-node@v4
        with:
            node-version: ${{ env.node-version }}
    - name: Enable Corepack
        run: |
            corepack enable

    - name: Run install
        uses: borales/actions-yarn@v5
        with:
            cmd: install
            
    - name: Build Pkg
        run: |
            cd ${{ github.workspace }}
            yarn build:pkg
            cd apps/cc-agent-web
            yarn build
            cd ../../

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/cc-agent-adr/**/*.gradle*', 'apps/cc-agent-adr/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./apps/cc-agent-adr/gradlew

      - name: Build APK
        working-directory: ./apps/cc-agent-adr
        run: ./gradlew assembleDebug

      - name: Build APK
        working-directory: ./apps/cc-agent-adr
        run: |
          ./gradlew assembleDebug
          mv ./apps/cc-agent-adr/app/build/outputs/apk/debug/app-debug.apk ./apps/cc-agent-adr/app/build/outputs/apk/debug/app-${{env.VERSION}}.apk
          gh release upload ${{ github.ref_name }} ./apps/cc-agent-adr/app/build/outputs/apk/debug/app-${{env.VERSION}}.apk

  build_cc_server_and_connctor:
    runs-on: windows-latest
    needs: release
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Download Npcap SDK
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.15.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "$env:USERPROFILE\\npcap-sdk-1.15"
      - name: Set environment for Npcap
        shell: powershell
        run: |
          $NpcapPath = "$env:USERPROFILE\\npcap-sdk-1.15"
          echo "INCLUDE=$NpcapPath\\Include" | Out-File -Append $env:GITHUB_ENV

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            echo "LIB=$NpcapPath\\Lib" | Out-File -Append $env:GITHUB_ENV
          } else ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            echo "LIB=$NpcapPath\\Lib\\x64" | Out-File -Append $env:GITHUB_ENV
          }
          
      - name: Build cici-server
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cici-server"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } else ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          }
          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v${{evn.VERSION}}.exe"
          echo $OUTPUT_NAME
          Copy-Item $BUILT_PATH $OUTPUT_NAME
          gh release upload $OUTPUT_NAME

          
      - name: Build cc-connector-android
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cc-connector-android"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version =' | Select-Object -First 1).Line -replace '.*version = "(.*)".*','$1'
          Write-Host "Version: $VERSION"
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } if ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } 

          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v${{evn.VERSION}}.exe"
          echo $OUTPUT_NAME
          Copy-Item $BUILT_PATH $OUTPUT_NAME
          gh release upload $OUTPUT_NAME
          
    release:
        name: Release pushed tag
        runs-on: ubuntu-22.04
        steps:
            - name: Create release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  tag: ${{ github.ref_name }}
              run: |
                  if gh release view "$tag" --repo="$GITHUB_REPOSITORY" &> /dev/null; then
                    echo "Release $tag already exists."
                  else
                    gh release create "$tag" \
                        --repo="$GITHUB_REPOSITORY" \
                        --title="${tag}" \
                        --draft \
                        --generate-notes
                    echo "Release $tag created."
                  fi
