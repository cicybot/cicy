name: CiCy CD

on:
  push:
    tags:
      - v*

env:
  VERSION_NODE: 20.11.1
  VERSION: 1.0.86
  VERSION_ANDROID_NDK: 27.2.12479018
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: write

jobs:
  release:
    name: Release pushed tag
    runs-on: ubuntu-22.04
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          if gh release view "$tag" --repo="${{ github.repository }}" &> /dev/null; then
            echo "Release $tag already exists."
          else
            gh release create "$tag" \
              --repo="${{ github.repository }}" \
              --title="${tag}" \
              --draft \
              --generate-notes
            echo "Release $tag created."
          fi

  desktop-build:
    name: desktop-build
    needs: build_agent
    strategy:
      matrix:
        include:
          - os: windows-latest
            command: make:x64
            tag: x64
    runs-on: ${{ matrix.os }}
    env:
      PROJECT_NAME: CiCy
      GITHUB_REPOSITORY: ${{ github.repository }}
      MAKE_OUT_DIR: ${{ github.workspace }}/apps/desktop/out/make
      
    steps:
      - name: Checkout to git repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.VERSION_NODE }}

      - name: Enable Corepack
        run: corepack enable

      - name: Run install
        uses: borales/actions-yarn@v5
        with:
          cmd: install
      - name: Build Pkg
        run: |
          yarn build:pkg
          cd apps/desktop/public/static/assets
          gh release download ${{ github.ref_name }}
          
          $APK_URL = "https://github.com/cicybot/ClashMetaForAndroid/releases/download/Alpha/cmfa-2.11.14-alpha-universal-release.apk"
          Write-Host "Downloading APK from $APK_URL"
          
          # Download the file
          Invoke-WebRequest -Uri $APK_URL -Headers @{ "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}" } -OutFile "app-v$env:VERSION.apk"
          Compress-Archive -Path "app-v$env:VERSION.apk" -DestinationPath "app-v$env:VERSION.apk.zip" -Force
          if (Test-Path "app-v$env:VERSION.apk") {
              Remove-Item "app-v$env:VERSION.apk" -Force
          }
          gh release upload $env:GITHUB_REF_NAME "app-v${env:VERSION}.apk.zip" --clobber
          ls
          cd ../../../../../
          node tools/fix-app.js

      - name: Run build distributive
        uses: borales/actions-yarn@v5
        with:
          cmd: ${{ matrix.command }}
          dir: 'apps/desktop'

      - name: Release Upload assets on Win32
        if: runner.os == 'Windows'
        run: |
          $BUILT_PATH = "${env:MAKE_OUT_DIR}/squirrel.windows/x64/${env:PROJECT_NAME}-${env:VERSION} Setup.exe"
          $OUTPUT_NAME = "${env:MAKE_OUT_DIR}/squirrel.windows/x64/${env:PROJECT_NAME}-v${env:VERSION}-win32-x64 Setup.exe"

          Write-Host "BUILT_PATH: $BUILT_PATH"
          Write-Host "OUTPUT_NAME: $OUTPUT_NAME"

          if (Test-Path "$BUILT_PATH") {
            Move-Item -Force "$BUILT_PATH" "$OUTPUT_NAME"
          } else {
            Write-Error "BUILT_PATH does not exist"
            exit 1
          }
          gh release upload $env:GITHUB_REF_NAME "$OUTPUT_NAME" --clobber
#
#  build_apk:
#    name: Build APK
#    runs-on: ubuntu-latest
#    needs: release
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Node
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ env.VERSION_NODE }}
#
#      - name: Enable Corepack
#        run: corepack enable
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: 17
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper/
#          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/cc-agent-adr/**/*.gradle*', 'apps/cc-agent-adr/gradle-wrapper.properties') }}
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./apps/cc-agent-adr/gradlew
#
#      - name: Build APK
#        working-directory: ./apps/cc-agent-adr
#        run: |
#          sh build.sh
#          mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/app-v${{ env.VERSION }}.apk
#          gh release upload ${{ github.ref_name }} app/build/outputs/apk/debug/app-v${{ env.VERSION }}.apk

  build_server_connector:
    runs-on: windows-latest
    needs: release
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build cicy-server
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          $ARTIFACT_NAME = "cicy-server"
          cd apps-rust/$ARTIFACT_NAME
          cargo build --target $env:TARGET --release
          Set-Location "$env:GITHUB_WORKSPACE"
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }
          if ("${{ matrix.target }}" -eq "i686-pc-windows-msvc") {
              $TARGET_NAME = "i686"
          } else {
              $TARGET_NAME = "x64"
          }
          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v${{ env.VERSION }}-win32-$TARGET_NAME.exe"
          Copy-Item $BUILT_PATH $OUTPUT_NAME
          gh release upload ${{ github.ref_name }} $OUTPUT_NAME

      - name: Build cicy-connector
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          $ARTIFACT_NAME = "cicy-connector"
          cd apps-rust/$ARTIFACT_NAME
          cargo build --target $env:TARGET --release
          Set-Location "$env:GITHUB_WORKSPACE"
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ("${{ matrix.target }}" -eq "i686-pc-windows-msvc") {
              $TARGET_NAME = "i686"
          } else {
              $TARGET_NAME = "x64"
          }
          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v${{ env.VERSION }}-win32-$TARGET_NAME.exe"
          Copy-Item $BUILT_PATH $OUTPUT_NAME
          gh release upload ${{ github.ref_name }} $OUTPUT_NAME

  build_agent:
    name: Build cicy-agent
    runs-on: ubuntu-22.04
    needs: build_server_connector
    strategy:
      matrix:
        target:
          - armv7-linux-androideabi
          - aarch64-linux-android
          - x86_64-linux-android
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Android NDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_HOME }}/ndk/${{ env.VERSION_ANDROID_NDK }}
          key: ndk-${{ env.VERSION_ANDROID_NDK }}

      - name: Install NDK if not cached
        run: |
          if [ ! -d "$ANDROID_HOME/ndk/${VERSION_ANDROID_NDK}" ]; then
            sdkmanager --install "ndk;${VERSION_ANDROID_NDK}"
          fi

      - name: Set environment for ${{ matrix.target }}
        run: |
          TOOLCHAIN=$ANDROID_HOME/ndk/${VERSION_ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin
          ls $TOOLCHAIN/armv*
          ls $TOOLCHAIN/llvm-ar
          API=33
          case "${{ matrix.target }}" in
            aarch64-linux-android)
              echo "CC_aarch64_linux_android=$TOOLCHAIN/aarch64-linux-android$API-clang" >> $GITHUB_ENV
              echo "AR_aarch64_linux_android=$TOOLCHAIN/llvm-ar" >> $GITHUB_ENV
              ;;
            armv7-linux-androideabi)
              cp $TOOLCHAIN/armv7a-linux-androideabi$API-clang $TOOLCHAIN/armv7-linux-androideabi$API-clang
              echo "CC_armv7_linux_androideabi=$TOOLCHAIN/armv7-linux-androideabi$API-clang" >> $GITHUB_ENV
              echo "AR_armv7_linux_androideabi=$TOOLCHAIN/llvm-ar" >> $GITHUB_ENV
              ;;
            x86_64-linux-android)
              echo "CC_x86_64_linux_android=$TOOLCHAIN/x86_64-linux-android$API-clang" >> $GITHUB_ENV
              echo "AR_x86_64_linux_android=$TOOLCHAIN/llvm-ar" >> $GITHUB_ENV
              ;;
          esac
          echo "CARGO_TARGET_$(echo '${{ matrix.target }}' | tr a-z A-Z | tr '-' '_')_LINKER=$TOOLCHAIN/${{ matrix.target }}$API-clang" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C link-arg=--sysroot=$ANDROID_HOME/ndk/${VERSION_ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot" >> $GITHUB_ENV

      - name: Build with cargo
        run: |
          cd apps-rust/cicy-agent
          cargo build --target=${{ matrix.target }} --release
          cd $GITHUB_WORKSPACE

      - name: Copy build output to assets
        run: |
          case "${{ matrix.target }}" in
            aarch64-linux-android)
                TARGET_NAME="arm64"
              ;;
            armv7-linux-androideabi)
                TARGET_NAME="armv7a"
              ;;
            x86_64-linux-android)
                TARGET_NAME="x86_64"
              ;;
          esac
          cp target/${{ matrix.target }}/release/cicy-agent target/${{ matrix.target }}/release/cicy-agent-v${{ env.VERSION }}-$TARGET_NAME
          gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/cicy-agent-v${{ env.VERSION }}-$TARGET_NAME

  build_mac_server_connector:
    name: build_mac_server_client for macOS
    runs-on: macos-latest
    needs: release
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build cicy-server
        run: |
          ARTIFACT_NAME=cicy-server
          cd apps-rust/$ARTIFACT_NAME
          cargo build --target ${{ matrix.target }} --release
          cd $GITHUB_WORKSPACE
          BUILT_PATH=target/${{ matrix.target }}/release/$ARTIFACT_NAME

          PLATFORM=$(echo ${{ matrix.target }} | sed 's/.*-//')

          case "${{ matrix.target }}" in
            x86_64-apple-darwin)
              TARGET_NAME=x64
              ;;
            aarch64-apple-darwin)
              TARGET_NAME=arm64
              ;;
          esac
          echo $TARGET_NAME
          OUTPUT_NAME=target/${{ matrix.target }}/release/$ARTIFACT_NAME-v${{ env.VERSION }}-$PLATFORM-$TARGET_NAME
          cp "$BUILT_PATH" "$OUTPUT_NAME"
          gh release upload ${{ github.ref_name }} $OUTPUT_NAME

      - name: Build cicy-connector
        run: |
          ARTIFACT_NAME=cicy-connector
          cd apps-rust/$ARTIFACT_NAME
          cargo build --target ${{ matrix.target }} --release
          cd $GITHUB_WORKSPACE
          BUILT_PATH=target/${{ matrix.target }}/release/$ARTIFACT_NAME
          PLATFORM=$(echo ${{ matrix.target }} | sed 's/.*-//')

          case "${{ matrix.target }}" in
            x86_64-apple-darwin)
              TARGET_NAME=x64
              ;;
            aarch64-apple-darwin)
              TARGET_NAME=arm64
              ;;
          esac
          echo $TARGET_NAME
          OUTPUT_NAME=target/${{ matrix.target }}/release/$ARTIFACT_NAME-v${{ env.VERSION }}-$PLATFORM-$TARGET_NAME
          cp "$BUILT_PATH" "$OUTPUT_NAME"
          gh release upload ${{ github.ref_name }} $OUTPUT_NAME

