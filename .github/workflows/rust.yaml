name: Android Rust Build

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-android:
    name: Rust Android Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - armv7-linux-androideabi   # armeabi-v7a
          - aarch64-linux-android     # arm64-v8a
          - x86_64-linux-android      # x86_64

    env:
      ANDROID_NDK_VERSION: 27.2.12479018
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # âœ… Cache Cargo dependencies
      - name: Cache Cargo registry and build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-


      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set up Java (required for sdkmanager)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
    
      
      - name: Cache Android NDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_HOME }}/ndk/${{ env.ANDROID_NDK_VERSION }}
          key: ndk-${{ env.ANDROID_NDK_VERSION }}


      - name: Install NDK if not cached
        run: |
          if [ ! -d "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" ]; then
            sdkmanager --install "ndk;$ANDROID_NDK_VERSION"
          else
            echo "NDK already cached."
          fi

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build with cargo-ndk for ${{ matrix.target }}
        run: |
          cd apps-rust/cc-agent-rust
          cargo --target=${{ matrix.target }} -o ./target/android build --release

      - name: Copy build output to assets with version
        run: |
          mkdir -p assets
          VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo $VERSION
          ARTIFACT_NAME=cc-agent-rust
          BUILT_PATH=target/android/${{ matrix.target }}/release/$ARTIFACT_NAME
          OUTPUT_NAME=${ARTIFACT_NAME%}-${{ matrix.target }}-v$VERSION
          cp "$BUILT_PATH" "assets/$OUTPUT_NAME"
          ls -alh assets
