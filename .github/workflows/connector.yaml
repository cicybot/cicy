name: Rust Multi-Platform Build

on:
  push:
    branches: 
      - dev
jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          # - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Download Npcap SDK
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.15.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "$env:USERPROFILE\\npcap-sdk-1.15"
      - name: Set environment for Npcap
        shell: powershell
        run: |
          $NpcapPath = "$env:USERPROFILE\\npcap-sdk-1.15"
          echo "INCLUDE=$NpcapPath\\Include" | Out-File -Append $env:GITHUB_ENV
          echo "LIB=$NpcapPath\\Lib\x64" | Out-File -Append $env:GITHUB_ENV

      - name: Build cici-server
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cici-server"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version =' | Select-Object -First 1).Line -replace '.*version = "(.*)".*','$1'
          Write-Host "Version: $VERSION"
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } elseif ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } else {
            $TARGET_NAME = $env:TARGET
          }

          $OUTPUT_NAME = "$ARTIFACT_NAME-$TARGET_NAME-v$VERSION.exe"

          Copy-Item $BUILT_PATH "$env:GITHUB_WORKSPACE/assets/$OUTPUT_NAME"
          
      - name: Build cc-connector-android
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cc-connector-android"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version =' | Select-Object -First 1).Line -replace '.*version = "(.*)".*','$1'
          Write-Host "Version: $VERSION"
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } elseif ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } else {
            $TARGET_NAME = $env:TARGET
          }

          $OUTPUT_NAME = "$ARTIFACT_NAME-$TARGET_NAME-v$VERSION.exe"

          Copy-Item $BUILT_PATH "$env:GITHUB_WORKSPACE/assets/$OUTPUT_NAME"


  # build-macos:
  #   name: Build for macOS Intel and ARM
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       - x86_64-apple-darwin
  #       - aarch64-apple-darwin
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install Rust target
  #       run: rustup target add ${{ matrix.target }}

  #     - name: Build cici-server
  #       run: |
  #         mkdir -p assets
  #         ARTIFACT_NAME=cici-server
  #         cd apps-rust/$ARTIFACT_NAME
  #         cargo build --target ${{ matrix.target }} --release
  #         VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)
  #         echo $VERSION
  #         BUILT_PATH=target/${{ matrix.target }}/release/$ARTIFACT_NAME
  #         if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
  #           TARGET_NAME=x86_64
  #         elif [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
  #           TARGET_NAME=arm64
  #         fi
  #         OUTPUT_NAME=${ARTIFACT_NAME%}-android-${TARGET_NAME}-v$VERSION
  #         cp "$BUILT_PATH" "assets/$OUTPUT_NAME"

  #     - name: Build cc-connector-android
  #       run: |
  #         mkdir -p assets
  #         ARTIFACT_NAME=cc-connector-android
  #         cd apps-rust/$ARTIFACT_NAME
  #         cargo build --target ${{ matrix.target }} --release
  #         VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)
  #         echo $VERSION
  #         BUILT_PATH=target/${{ matrix.target }}/release/$ARTIFACT_NAME
  #         if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
  #           TARGET_NAME=x86_64
  #         elif [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
  #           TARGET_NAME=arm64
  #         fi
  #         OUTPUT_NAME=${ARTIFACT_NAME%}-android-${TARGET_NAME}-v$VERSION
  #         cp "$BUILT_PATH" "assets/$OUTPUT_NAME"

