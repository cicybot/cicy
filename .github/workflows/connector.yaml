name: Rust Multi-Platform Build

on:
  push:
    branches: 
      - dev
jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Download Npcap SDK
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.15.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "$env:USERPROFILE\\npcap-sdk-1.15"
      - name: Set environment for Npcap
        shell: powershell
        run: |
          $NpcapPath = "$env:USERPROFILE\\npcap-sdk-1.15"
          echo "INCLUDE=$NpcapPath\\Include" | Out-File -Append $env:GITHUB_ENV

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } elseif ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } else {
            $TARGET_NAME = $env:TARGET
          }
          
      - name: Build cici-server
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cici-server"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version =' | Select-Object -First 1).Line -replace '.*version = "(.*)".*','$1'
          Write-Host "Version: $VERSION"
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }
          
          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } elseif ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } else {
            $TARGET_NAME = $env:TARGET
          } 


          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v$VERSION.exe"
          echo $OUTPUT_NAME
          Copy-Item $BUILT_PATH $OUTPUT_NAME
          
      - name: Build cc-connector-android
        shell: powershell
        env:
          TARGET: ${{ matrix.target }}
        run: |
          mkdir assets
          $ARTIFACT_NAME = "cc-connector-android"
          Set-Location "apps-rust/$ARTIFACT_NAME"
          cargo build --target $env:TARGET --release
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version =' | Select-Object -First 1).Line -replace '.*version = "(.*)".*','$1'
          Write-Host "Version: $VERSION"
          cd ../../
          $BUILT_PATH = "target/$env:TARGET/release/$ARTIFACT_NAME.exe"
          if (!(Test-Path $BUILT_PATH)) {
            Write-Error "Build output not found at $BUILT_PATH"
            exit 1
          }

          if ($env:TARGET -eq "i686-pc-windows-msvc") {
            $TARGET_NAME = "i686"
          } elseif ($env:TARGET -eq "x86_64-pc-windows-msvc") {
            $TARGET_NAME = "x86_64"
          } else {
            $TARGET_NAME = $env:TARGET
          } 

          $OUTPUT_NAME = "target/$env:TARGET/release/$ARTIFACT_NAME-v$VERSION.exe"
          echo $OUTPUT_NAME
          Copy-Item $BUILT_PATH $OUTPUT_NAME
